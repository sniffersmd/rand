#pragma once
#include <iostream>
#include <cmath>
namespace prime2024 {
	unsigned ops_arithm;
	unsigned ops_comp;
	unsigned ops_sqrt;
	using std::endl;
	using std::cout;

	bool isPrime(unsigned n) {
		if (n < 4) return true;
		if (n % 2 == 0) return false;
		unsigned i, k(0.5 * sqrt(n) + 1);
		for (i = 1; i < k; ++i)
			if (n % (2 * i + 1) == 0) return false;
		return true;
	}

	bool isPrime_M(unsigned n) {
		if (n <= 1) return false;         // Числа меньше 2 не являются простыми
		if (n <= 3) return true;          // 2 и 3 являются простыми числами
		if (n % 2 == 0 || n % 3 == 0) return false;  // Исключаем четные числа и кратные 3

		unsigned limit = static_cast<unsigned>(sqrt(n));  // Проверяем делители только до квадратного корня из n
		for (unsigned i = 5; i <= limit; i += 6) {
			if (n % i == 0 || n % (i + 2) == 0) return false;  // Проверяем числа вида 6k ± 1
		}
		return true;
	}


	bool isPrime_debug(unsigned n) {
		ops_comp++;
		if (n < 4) return true;
		++ops_comp; ops_arithm;
		if (n % 2 == 0) return false;
		ops_sqrt++;
		unsigned i, k(0.5 * sqrt(n) + 1);
		for (i = 1; i < k; ++i) {
			++ops_comp;
			ops_arithm += 3;
			if (n % (2 * i + 1) == 0) return false;
		}

		

		return true;
	}

	bool isPrime_debug_M(unsigned n) {
		ops_comp++;  // Увеличиваем счетчик операций сравнения
		if (n < 4) return true;  // Проверка для чисел меньше 4

		++ops_comp; ops_arithm++;  // Увеличиваем счетчик операций сравнения и арифметических операций
		if (n % 2 == 0) return false;  // Проверка четности числа

		ops_sqrt++;  // Увеличиваем счетчик вызовов sqrt
		unsigned i, k = 0.5 * sqrt(n) + 1;  // Вычисляем верхнюю границу для проверки делителей

		for (i = 1; i < k; ++i) {  // Проходим через возможные делители
			++ops_comp;  // Увеличиваем счетчик операций сравнения
			ops_arithm += 3;  // Увеличиваем счетчик арифметических операций
			if (n % (2 * i + 1) == 0) return false;  // Проверка делимости
		}

		return true;  // Если число не делится ни на одно из проверенных, оно простое
	}

	void reset() {
		unsigned ops_arithm = 0;
		unsigned ops_comp = 0;
		unsigned ops_sqrt = 0;

	}
}
